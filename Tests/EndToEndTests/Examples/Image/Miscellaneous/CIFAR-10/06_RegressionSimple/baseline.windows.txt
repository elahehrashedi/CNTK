CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz
    Hardware threads: 24
    Total Memory: 33476764 kB
-------------------------------------------------------------------
Looking for data in: /cygdrive/c/src/CNTK/Examples/Image/Miscellaneous/CIFAR-10
Looking for data in: //storage.ccp.philly.selfhost.corp.microsoft.com/public/CNTKTestData
Copying test data to local directory
Done copying data
Starting cntk run
=== Running C:/src/CNTK/x64/release/cntk.exe configFile=C:\src\CNTK\Examples\Image\Miscellaneous\CIFAR-10/06_RegressionSimple.cntk currentDirectory=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu RunDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu DataDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu ConfigDir=C:\src\CNTK\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu DeviceId=0 timestamping=true [command=TrainConvNet:Test] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Aug 23 2016 17:28:02
		Last modified date: Tue Aug 23 15:07:41 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: C:\Tools\cudnn\cuda
		Built by pkranen on PKRANENGUAM3
		Build Path: C:\src\CNTK\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
08/23/2016 16:36:10: Redirecting stderr to file -_TrainConvNet_Test.log
08/23/2016 16:36:10: -------------------------------------------------------------------
08/23/2016 16:36:10: Build info: 

08/23/2016 16:36:10: 		Built time: Aug 23 2016 17:28:02
08/23/2016 16:36:10: 		Last modified date: Tue Aug 23 15:07:41 2016
08/23/2016 16:36:10: 		Build type: Release
08/23/2016 16:36:10: 		Build target: GPU
08/23/2016 16:36:10: 		With 1bit-SGD: yes
08/23/2016 16:36:10: 		Math lib: mkl
08/23/2016 16:36:10: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/23/2016 16:36:10: 		CUB_PATH: C:\src\cub-1.4.1
08/23/2016 16:36:10: 		CUDNN_PATH: C:\Tools\cudnn\cuda
08/23/2016 16:36:10: 		Built by pkranen on PKRANENGUAM3
08/23/2016 16:36:10: 		Build Path: C:\src\CNTK\Source\CNTK\
08/23/2016 16:36:10: -------------------------------------------------------------------
08/23/2016 16:36:10: -------------------------------------------------------------------
08/23/2016 16:36:10: GPU info:

08/23/2016 16:36:10: 		Device[0]: cores = 1536; computeCapability = 5.2; type = "GeForce GTX 960"; memory = 2048 MB
08/23/2016 16:36:10: -------------------------------------------------------------------

08/23/2016 16:36:10: Running on PKRANENGUAM3 at 2016/08/23 16:36:10
08/23/2016 16:36:10: Command line: 
C:\src\CNTK\x64\release\cntk.exe  configFile=C:\src\CNTK\Examples\Image\Miscellaneous\CIFAR-10/06_RegressionSimple.cntk  currentDirectory=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  RunDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  DataDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  ConfigDir=C:\src\CNTK\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu  DeviceId=0  timestamping=true  [command=TrainConvNet:Test]  stderr=-



08/23/2016 16:36:10: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/23/2016 16:36:10: command = TrainConvNet:Write
makeMode = false ; traceLevel = 1 ; deviceId = "auto"
rootDir = "." ; configDir = "$rootDir$" ; dataDir  = "$rootDir$" ;
outputDir = "$rootDir$/Output" ; modelDir = "$outputDir$/Models"
modelPath = "$ModelDir$/06_RegressionSimple.cmf"
TrainConvNet = {
    action = "train"
    BrainScriptNetworkBuilder = [
        imageShape = 32:32:3
        featScale = Constant(1/256)
        labelDim = 3
        model (features) = {
            featNorm = Scale(features, featScale)
            h1 = LinearLayer {100,      init="gaussian", initValueScale=1.5} (featNorm)
            ol = LinearLayer {labelDim, init="gaussian", initValueScale=1.5} (h1)
        }.ol
        features = Input {imageShape}
        regrLabels = Input {labelDim}
        ol = model (features)
        sqerr = SquareError (regrLabels, ol)
        rmse = Sqrt (Constant(1/labelDim).* sqerr)
        featureNodes    = (features)
        labelNodes      = (regrLabels)
        criterionNodes  = (rmse)
        evaluationNodes = (rmse)
        OutputNodes     = (ol)
    ]
    SGD = {
        epochSize = 0
        maxEpochs = 2
        minibatchSize = 128
        learningRatesPerSample = 0.0005
        momentumAsTimeConstant = 1024
        firstMBsToShowResult = 5 ; numMBsToShowResult = 50
    }
    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "$dataDir$/cifar-10-batches-py/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "$dataDir$/cifar-10-batches-py/train_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}
Write = {
    action = "write"
    minibatchSize = 1
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "$OutputDir$/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "$dataDir$/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "$dataDir$/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}
Test = {
    action = "test"
    minibatchSize = 512
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "$OutputDir$/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "$dataDir$/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "$dataDir$/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}
currentDirectory=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
RunDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
DataDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
ConfigDir=C:\src\CNTK\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
DeviceId=0
timestamping=true
[command=TrainConvNet:Test]
stderr=-

08/23/2016 16:36:10: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/23/2016 16:36:10: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/23/2016 16:36:10: command = TrainConvNet:Write
makeMode = false ; traceLevel = 1 ; deviceId = "auto"
rootDir = "." ; configDir = "." ; dataDir  = "." ;
outputDir = "./Output" ; modelDir = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models"
modelPath = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf"
TrainConvNet = {
    action = "train"
    BrainScriptNetworkBuilder = [
        imageShape = 32:32:3
        featScale = Constant(1/256)
        labelDim = 3
        model (features) = {
            featNorm = Scale(features, featScale)
            h1 = LinearLayer {100,      init="gaussian", initValueScale=1.5} (featNorm)
            ol = LinearLayer {labelDim, init="gaussian", initValueScale=1.5} (h1)
        }.ol
        features = Input {imageShape}
        regrLabels = Input {labelDim}
        ol = model (features)
        sqerr = SquareError (regrLabels, ol)
        rmse = Sqrt (Constant(1/labelDim).* sqerr)
        featureNodes    = (features)
        labelNodes      = (regrLabels)
        criterionNodes  = (rmse)
        evaluationNodes = (rmse)
        OutputNodes     = (ol)
    ]
    SGD = {
        epochSize = 0
        maxEpochs = 2
        minibatchSize = 128
        learningRatesPerSample = 0.0005
        momentumAsTimeConstant = 1024
        firstMBsToShowResult = 5 ; numMBsToShowResult = 50
    }
    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/train_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}
Write = {
    action = "write"
    minibatchSize = 1
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}
Test = {
    action = "test"
    minibatchSize = 512
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}
currentDirectory=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
RunDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
DataDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
ConfigDir=C:\src\CNTK\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
DeviceId=0
timestamping=true
[command=TrainConvNet:Test]
stderr=-

08/23/2016 16:36:10: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/23/2016 16:36:10: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 06_RegressionSimple.cntk:command=TrainConvNet:Test
configparameters: 06_RegressionSimple.cntk:configDir=C:\src\CNTK\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 06_RegressionSimple.cntk:currentDirectory=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:dataDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:deviceId=0
configparameters: 06_RegressionSimple.cntk:makeMode=false
configparameters: 06_RegressionSimple.cntk:modelDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models
configparameters: 06_RegressionSimple.cntk:modelPath=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf
configparameters: 06_RegressionSimple.cntk:outputDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:rootDir=.
configparameters: 06_RegressionSimple.cntk:RunDir=C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu
configparameters: 06_RegressionSimple.cntk:stderr=-
configparameters: 06_RegressionSimple.cntk:Test={
    action = "test"
    minibatchSize = 512
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: 06_RegressionSimple.cntk:timestamping=true
configparameters: 06_RegressionSimple.cntk:traceLevel=1
configparameters: 06_RegressionSimple.cntk:TrainConvNet={
    action = "train"
    BrainScriptNetworkBuilder = [
        imageShape = 32:32:3
        featScale = Constant(1/256)
        labelDim = 3
        model (features) = {
            featNorm = Scale(features, featScale)
            h1 = LinearLayer {100,      init="gaussian", initValueScale=1.5} (featNorm)
            ol = LinearLayer {labelDim, init="gaussian", initValueScale=1.5} (h1)
        }.ol
        features = Input {imageShape}
        regrLabels = Input {labelDim}
        ol = model (features)
        sqerr = SquareError (regrLabels, ol)
        rmse = Sqrt (Constant(1/labelDim).* sqerr)
        featureNodes    = (features)
        labelNodes      = (regrLabels)
        criterionNodes  = (rmse)
        evaluationNodes = (rmse)
        OutputNodes     = (ol)
    ]
    SGD = {
        epochSize = 0
        maxEpochs = 2
        minibatchSize = 128
        learningRatesPerSample = 0.0005
        momentumAsTimeConstant = 1024
        firstMBsToShowResult = 5 ; numMBsToShowResult = 50
    }
    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/train_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/train_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

configparameters: 06_RegressionSimple.cntk:Write={
    action = "write"
    minibatchSize = 1
    outputNodeNames = (ol, regrLabels, rmse)
    outputPath = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/06_RegressionSimple"
    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_map.txt"
            input = {
                features = { transforms = (
                    { type = "Scale" ; width = 32 ; height = 32 ; channels = 3 ; interpolations = "linear" } :
                    { type = "Transpose" }
                )}
                ignored = { labelDim = 10 }
            }
        } : {
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/cifar-10-batches-py/test_regrLabels.txt"
            input = {
                regrLabels = { dim = 3 ; format = "dense" }
            }
        })
    }
}

08/23/2016 16:36:11: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/23/2016 16:36:11: Commands: TrainConvNet Test
08/23/2016 16:36:11: Precision = "float"
08/23/2016 16:36:11: CNTKModelPath: C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf
08/23/2016 16:36:11: CNTKCommandTrainInfo: TrainConvNet : 2
08/23/2016 16:36:11: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 2

08/23/2016 16:36:11: ##############################################################################
08/23/2016 16:36:11: #                                                                            #
08/23/2016 16:36:11: # Action "train"                                                             #
08/23/2016 16:36:11: #                                                                            #
08/23/2016 16:36:11: ##############################################################################

08/23/2016 16:36:11: CNTKCommandTrainBegin: TrainConvNet

08/23/2016 16:36:11: Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.333333.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[3 x 0] as gaussian later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[100 x 0] as gaussian later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.003906.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[100] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[100] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[3] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[3] <- 0.000000.

Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 16 nodes to process in pass 1.

Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> regrLabels = InputValue() :  -> [3 x *]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 0]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 0]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Node 'ol.h1.W' (LearnableParameter operation) operation: Tensor shape was inferred as [100 x 32 x 32 x 3].
Node 'ol.h1.W' (LearnableParameter operation): Initializing Parameter[100 x 32 x 32 x 3] <- gaussian(seed=2, range=0.003608*1.500000, onCPU=true).
Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *] -> [100 x *]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *], [100] -> [100 x *]
Node 'ol.ol.W' (LearnableParameter operation) operation: Tensor shape was inferred as [3 x 100].
Node 'ol.ol.W' (LearnableParameter operation): Initializing Parameter[3 x 100] <- gaussian(seed=1, range=0.020000*1.500000, onCPU=true).
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *] -> [3 x *]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *], [3] -> [3 x *]
Validating --> sqerr = SquareError (regrLabels, ol) : [3 x *], [3 x *] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 8 nodes to process in pass 2.


Validating network, final pass.



9 out of 16 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/23/2016 16:36:12: Created model with 16 nodes on GPU 0.

08/23/2016 16:36:12: Training criterion node(s):
08/23/2016 16:36:12: 	rmse = Sqrt


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 27 matrices, 13 are shared as 6, and 14 are not shared.

	{ ol.h1.PlusArgs[0] : [100 x *] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] }
	{ ol.h1 : [100 x *]
	  ol.h1.W : [100 x 32 x 32 x 3] (gradient) }
	{ ol : [3 x *]
	  ol.ol.W : [3 x 100] (gradient) }
	{ ol : [3 x *] (gradient)
	  ol.h1 : [100 x *] (gradient)
	  rmse.z : [1 x 1] }
	{ ol.h1.b : [100] (gradient)
	  ol.ol.PlusArgs[0] : [3 x *] (gradient) }
	{ ol.ol.b : [3] (gradient)
	  sqerr : [1] }


08/23/2016 16:36:12: Training 307603 parameters in 4 out of 4 parameter tensors and 11 nodes with gradient:

08/23/2016 16:36:12: 	Node 'ol.h1.W' (LearnableParameter operation) : [100 x 32 x 32 x 3]
08/23/2016 16:36:12: 	Node 'ol.h1.b' (LearnableParameter operation) : [100]
08/23/2016 16:36:12: 	Node 'ol.ol.W' (LearnableParameter operation) : [3 x 100]
08/23/2016 16:36:12: 	Node 'ol.ol.b' (LearnableParameter operation) : [3]

08/23/2016 16:36:12: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/23/2016 16:36:12: Starting Epoch 1: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples
BlockRandomizer::StartEpoch: epoch 1: samples [0..50000] (first sequence at sample 0), worker rank 0, total workers 1

08/23/2016 16:36:12: Starting minibatch loop.
08/23/2016 16:36:13:  Epoch[ 1 of 2]-Minibatch[ -48-   1]: rmse = 0.04855239 * 128; time = 0.3973s; samplesPerSecond = 322.2
08/23/2016 16:36:13:  Epoch[ 1 of 2]-Minibatch[ -47-   2]: rmse = 0.04447597 * 128; time = 0.0020s; samplesPerSecond = 63872.3
08/23/2016 16:36:13:  Epoch[ 1 of 2]-Minibatch[ -46-   3]: rmse = 0.04118720 * 128; time = 0.0321s; samplesPerSecond = 3990.0
08/23/2016 16:36:13:  Epoch[ 1 of 2]-Minibatch[ -45-   4]: rmse = 0.03747427 * 128; time = 0.0190s; samplesPerSecond = 6736.5
08/23/2016 16:36:13:  Epoch[ 1 of 2]-Minibatch[ -44-   5]: rmse = 0.03261119 * 128; time = 0.0190s; samplesPerSecond = 6724.1
08/23/2016 16:36:13:  Epoch[ 1 of 2]-Minibatch[   1-  50]: rmse = 0.00665965 * 5760; time = 0.7024s; samplesPerSecond = 8200.5
08/23/2016 16:36:14:  Epoch[ 1 of 2]-Minibatch[  51- 100]: rmse = 0.00157926 * 6400; time = 0.7539s; samplesPerSecond = 8489.7
08/23/2016 16:36:15:  Epoch[ 1 of 2]-Minibatch[ 101- 150]: rmse = 0.00088571 * 6400; time = 0.7189s; samplesPerSecond = 8902.2
08/23/2016 16:36:16:  Epoch[ 1 of 2]-Minibatch[ 151- 200]: rmse = 0.00064759 * 6400; time = 0.7121s; samplesPerSecond = 8987.8
08/23/2016 16:36:16:  Epoch[ 1 of 2]-Minibatch[ 201- 250]: rmse = 0.00070876 * 6400; time = 0.7418s; samplesPerSecond = 8627.2
08/23/2016 16:36:17:  Epoch[ 1 of 2]-Minibatch[ 251- 300]: rmse = 0.00075543 * 6400; time = 0.7700s; samplesPerSecond = 8311.7
08/23/2016 16:36:18:  Epoch[ 1 of 2]-Minibatch[ 301- 350]: rmse = 0.00085441 * 6400; time = 0.8262s; samplesPerSecond = 7746.0
08/23/2016 16:36:19: Finished Epoch[ 1 of 2]: [Training] rmse = 0.00207383 * 50000; totalSamplesSeen = 50000; learningRatePerSample = 0.00050000002; epochTime=6.47144s
08/23/2016 16:36:19: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf.1'

08/23/2016 16:36:19: Starting Epoch 2: learning rate per sample = 0.000500  effective momentum = 0.882497  momentum as time constant = 1024.0 samples
BlockRandomizer::StartEpoch: epoch 2: samples [50000..100000] (first sequence at sample 50000), worker rank 0, total workers 1

08/23/2016 16:36:19: Starting minibatch loop.
08/23/2016 16:36:19:  Epoch[ 2 of 2]-Minibatch[ -48-   1, 0.29%]: rmse = 0.00039459 * 128; time = 0.0849s; samplesPerSecond = 1507.1
08/23/2016 16:36:19:  Epoch[ 2 of 2]-Minibatch[ -47-   2, 0.57%]: rmse = 0.00054761 * 128; time = 0.0155s; samplesPerSecond = 8282.6
08/23/2016 16:36:19:  Epoch[ 2 of 2]-Minibatch[ -46-   3, 0.86%]: rmse = 0.00060375 * 128; time = 0.0287s; samplesPerSecond = 4458.8
08/23/2016 16:36:19:  Epoch[ 2 of 2]-Minibatch[ -45-   4, 1.14%]: rmse = 0.00043928 * 128; time = 0.0192s; samplesPerSecond = 6680.9
08/23/2016 16:36:19:  Epoch[ 2 of 2]-Minibatch[ -44-   5, 1.43%]: rmse = 0.00065985 * 128; time = 0.0193s; samplesPerSecond = 6630.1
08/23/2016 16:36:20:  Epoch[ 2 of 2]-Minibatch[   1-  50, 14.29%]: rmse = 0.00044159 * 5760; time = 0.6459s; samplesPerSecond = 8917.3
08/23/2016 16:36:20:  Epoch[ 2 of 2]-Minibatch[  51- 100, 28.57%]: rmse = 0.00043466 * 6400; time = 0.7655s; samplesPerSecond = 8360.0
08/23/2016 16:36:21:  Epoch[ 2 of 2]-Minibatch[ 101- 150, 42.86%]: rmse = 0.00042107 * 6400; time = 0.7370s; samplesPerSecond = 8684.0
08/23/2016 16:36:22:  Epoch[ 2 of 2]-Minibatch[ 151- 200, 57.14%]: rmse = 0.00040178 * 6400; time = 0.7358s; samplesPerSecond = 8697.5
08/23/2016 16:36:23:  Epoch[ 2 of 2]-Minibatch[ 201- 250, 71.43%]: rmse = 0.00046907 * 6400; time = 0.7947s; samplesPerSecond = 8053.1
08/23/2016 16:36:23:  Epoch[ 2 of 2]-Minibatch[ 251- 300, 85.71%]: rmse = 0.00040397 * 6400; time = 0.8170s; samplesPerSecond = 7833.4
08/23/2016 16:36:24:  Epoch[ 2 of 2]-Minibatch[ 301- 350, 100.00%]: rmse = 0.00038516 * 6400; time = 0.8157s; samplesPerSecond = 7846.3
08/23/2016 16:36:25: Finished Epoch[ 2 of 2]: [Training] rmse = 0.00041951 * 50000; totalSamplesSeen = 100000; learningRatePerSample = 0.00050000002; epochTime=6.188s
08/23/2016 16:36:25: SGD: Saving checkpoint model 'C:\cygwin64\tmp\cntk-test-20160823173437.19680\Examples\Image\Miscellaneous\CIFAR-10_06_RegressionSimple@release_gpu/Models/06_RegressionSimple.cmf'
08/23/2016 16:36:25: CNTKCommandTrainEnd: TrainConvNet

08/23/2016 16:36:25: Action "train" complete.


08/23/2016 16:36:25: ##############################################################################
08/23/2016 16:36:25: #                                                                            #
08/23/2016 16:36:25: # Action "test"                                                              #
08/23/2016 16:36:25: #                                                                            #
08/23/2016 16:36:25: ##############################################################################


Post-processing network...

1 roots:
	rmse = Sqrt()

Validating network. 16 nodes to process in pass 1.

Validating --> rmse.z.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> regrLabels = InputValue() :  -> [3 x *1]
Validating --> ol.ol.W = LearnableParameter() :  -> [3 x 100]
Validating --> ol.h1.W = LearnableParameter() :  -> [100 x 32 x 32 x 3]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> ol.h1.PlusArgs[0] = Times (ol.h1.W, ol.featNorm) : [100 x 32 x 32 x 3], [32 x 32 x 3 x *1] -> [100 x *1]
Validating --> ol.h1.b = LearnableParameter() :  -> [100]
Validating --> ol.h1 = Plus (ol.h1.PlusArgs[0], ol.h1.b) : [100 x *1], [100] -> [100 x *1]
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [3 x 100], [100 x *1] -> [3 x *1]
Validating --> ol.ol.b = LearnableParameter() :  -> [3]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [3 x *1], [3] -> [3 x *1]
Validating --> sqerr = SquareError (regrLabels, ol) : [3 x *1], [3 x *1] -> [1]
Validating --> rmse.z = ElementTimes (rmse.z.ElementTimesArgs[0], sqerr) : [1 x 1], [1] -> [1 x 1]
Validating --> rmse = Sqrt (rmse.z) : [1 x 1] -> [1 x 1]

Validating network. 8 nodes to process in pass 2.


Validating network, final pass.



9 out of 16 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 16 matrices, 0 are shared as 0, and 16 are not shared.


08/23/2016 16:36:27: Minibatch[1-20]: rmse = 0.00098836 * 10000
08/23/2016 16:36:27: Final Results: Minibatch[1-20]: rmse = 0.00098836 * 10000

08/23/2016 16:36:27: Action "test" complete.

08/23/2016 16:36:27: __COMPLETED__
